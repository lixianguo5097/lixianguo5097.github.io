<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小的bug</title>
  
  <subtitle>首页</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexo.lxgblog.com/"/>
  <updated>2020-06-08T01:57:22.661Z</updated>
  <id>https://hexo.lxgblog.com/</id>
  
  <author>
    <name>李先国</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springcloud-1</title>
    <link href="https://hexo.lxgblog.com/64547.html"/>
    <id>https://hexo.lxgblog.com/64547.html</id>
    <published>2020-06-08T01:51:01.269Z</published>
    <updated>2020-06-08T01:57:22.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章主要介绍的是集中配置组件SpringCloudConfig和消息总线SpringCloudBus这两个springcloud组件。</p><p>GitHub源码链接位于文章底部。</p><h4 id="集中配置组件SpringCloudConfig"><a href="#集中配置组件SpringCloudConfig" class="headerlink" title="集中配置组件SpringCloudConfig"></a>集中配置组件SpringCloudConfig</h4><h5 id="1-SpringCloudConfig-简介"><a href="#1-SpringCloudConfig-简介" class="headerlink" title="1.SpringCloudConfig 简介"></a>1.SpringCloudConfig 简介</h5><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在 Spring Cloud 中，有分布式配置中心组件 spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程 Git 仓库中。在 spring cloudconfig 组件中，分两个角色，一是 config server，二是 confiag client。</p><p>Config Server 是一个可横向扩展、集中式的配置服务器，它用于集中管理应用程序各个环境下的配置，默认使用 Git 存储配置文件内容，也可以使用 SVN 存储，或者是本地文件存储。</p><p>Config Client 是 Config Server 的客户端，用于操作存储在 Config Server 中的配置内容。微服务在启动时会请求 Config Server 获取配置文件的内容，请求到后再启动容器。</p><h5 id="2-配置客户端"><a href="#2-配置客户端" class="headerlink" title="2.配置客户端"></a>2.配置客户端</h5><p>创建springcloud-config-bus-client客户端项目<br>2.1 pom中添加依赖</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.2 在resource资中添加一个bootstrap.yml配置文件，这个配置是用来连接配置中心服务端，以及开放刷新接口的<br>这里的配置和下一步要上传到码云的配置文件名是有关联的。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#仓库中的文件名是由name-profile组成的，例如 config-dev</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config_client</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">#仓库中的分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#config服务端的url</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动配置刷新接口，访问http://本微服务ip+端口/actuator/refresh</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh</span></span><br></pre></td></tr></table></figure><p>2.3 创建client_config-dev.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8102</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config_client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">configBusTestMsg</span></span><br></pre></td></tr></table></figure><p>使用 GitHub 时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。因此这里使用国内的 Git 托管服务——码云（gitee.com）。</p><p>在码云创建一个仓库config-bus,将client_config-dev.yml配置文件上传到该仓库。复制该仓库的地址，填写到下一步的服务端配置中。</p><p>2.4 创建一个测试的controller，类上添加RefreshScope注解实现刷新功能。<br>这里使用Value注解获取配置中的值</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">@RestController</span></span><br><span class="line"><span class="string">@RefreshScope</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">ConfigBusController</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">@Value("$&#123;my.config&#125;")</span></span><br><span class="line">    <span class="string">private</span> <span class="string">String</span> <span class="string">myConfig;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">@GetMapping("/getConfig")</span></span><br><span class="line">    <span class="string">public</span> <span class="string">String</span> <span class="string">configBusTest()</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">return</span> <span class="string">myConfig;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="3-配置服务端"><a href="#3-配置服务端" class="headerlink" title="3.配置服务端"></a>3.配置服务端</h5><p>创建springcloud-config-bus-server服务端项目</p><p>3.1 pom中添加依赖</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.2 application.yml配置文件中添加配置</p><p>地址由步骤2.3中获取</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-bus</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">  <span class="comment">#码云仓库地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/lixianguo/config-bus.git</span></span><br></pre></td></tr></table></figure><p>3.3启动类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBusServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigBusServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h5><p>依次启动服务端、客户端，浏览器访问客户端的接口 localhost:8102/getConfig ，能获取到码云上配置文件中的配置</p><p><img src="https://www.lxgblog.com/data/blogArticles/2020-03-19/1584606906.png" alt=""></p><p>修改码云上配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">configBusTestMsg！！！！！！！！！</span></span><br></pre></td></tr></table></figure><p>再次访问该接口，发现没有刷新配置，这里需要使用Postman等接口测试工具，使用post请求方式访问localhost:8102/actuator/refresh ，也就是本微服务ip+端口/actuator/refresh</p><p><img src="https://www.lxgblog.com/data/blogArticles/2020-03-19/1584607186.png" alt=""></p><p>浏览器再次访问客户端的接口 localhost:8102/getConfig 会发现已经发生改变。</p><p><img src="https://www.lxgblog.com/data/blogArticles/2020-03-19/1584607329.png" alt=""></p><p>这样就能实现刷新了。但是分布式项目中的微服务是由很多的，每个微服务都有自己的配置文件，这些配置文件都需要托管到码云上，如果大量的配置文件修改完以后需要刷新，就要访问不同的ip+端口，这样无疑是很麻烦的。如果只刷新一个接口就能刷新所有微服务的配置就好了。 消息总线 SpringCloudBus就解决了这个问题，他将刷新配置的接口从客户端转移到配置中心服务端了，客户端微服务可能有很多个，但是配置中心服务端只有一个。</p><h4 id="消息总线-SpringCloudBus"><a href="#消息总线-SpringCloudBus" class="headerlink" title="消息总线 SpringCloudBus"></a>消息总线 SpringCloudBus</h4><blockquote><p>Bus需要用到消息中间件来存储消息，如RabbitMq,kafka,本文使用RabbitMq作为示例。RabbitMq的安装与使用参考另一篇文章。</p></blockquote><h5 id="1-配置客户端"><a href="#1-配置客户端" class="headerlink" title="1.配置客户端"></a>1.配置客户端</h5><p>1.1 pom文件新添加依赖，上面Config的依赖不能删除</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>1.2 修改项目中bootstrap.yml配置文件，将刷新接口的配置删除</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#仓库中的文件名是由name-profile组成的，例如 config-dev</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config_client</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">#仓库中的分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#config服务端的url</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8101</span></span><br></pre></td></tr></table></figure><p>1.3 修改码云上的client——config-dev.yml配置文件的配置，添加一个rabbitmq的配置</p><h5 id="2-配置服务端"><a href="#2-配置服务端" class="headerlink" title="2.配置服务端"></a>2.配置服务端</h5><p>2.1 pom文件新添加依赖，上面Config的依赖不能删除</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.2 修改application.yml配置文件，添加RabbitMq和刷新接口的配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-bus</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/lixianguo/config-bus.git</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><p>依次启动服务端、客户端，浏览器访问客户端的接口 localhost:8102/getConfig ，能获取到码云上配置文件中的配置</p><p>修改码云上配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">configBusTestMsg！！！！！！！！！</span></span><br></pre></td></tr></table></figure><p>再次访问该接口，发现没有刷新配置，这里需要使用Postman等接口测试工具，使用post请求方式访问localhost:8101/actuator/refresh ，也就是配置中心微服务ip+端口/actuator/bus-refresh</p><p>再次访问该接口会发现已经刷新配置。</p><p>本文GitHub源码：<a href="https://github.com/lixianguo5097/springcloud/tree/master/springcloud-config-bus" target="_blank" rel="noopener">https://github.com/lixianguo5097/springcloud/tree/master/springcloud-config-bus</a></p><p>CSDN：<a href="https://blog.csdn.net/qq_27682773" target="_blank" rel="noopener">https://blog.csdn.net/qq_27682773</a><br>简书：<a href="https://www.jianshu.com/u/e99381e6886e" target="_blank" rel="noopener">https://www.jianshu.com/u/e99381e6886e</a><br>博客园：<a href="https://www.cnblogs.com/lixianguo" target="_blank" rel="noopener">https://www.cnblogs.com/lixianguo</a><br>个人博客：<a href="https://www.lxgblog.com" target="_blank" rel="noopener">https://www.lxgblog.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
      <category term="java" scheme="https://hexo.lxgblog.com/categories/java/"/>
    
      <category term="springcloud" scheme="https://hexo.lxgblog.com/categories/java/springcloud/"/>
    
    
      <category term="技术" scheme="https://hexo.lxgblog.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>lunbotu</title>
    <link href="https://hexo.lxgblog.com/59527.html"/>
    <id>https://hexo.lxgblog.com/59527.html</id>
    <published>2020-05-26T08:55:52.675Z</published>
    <updated>2020-05-26T08:58:14.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><div class="demo"></div><script>    function tt(){        $('.demo').slider({    imgList: [        {            img: 'https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3252521864,872614242&fm=26&gp=0.jpg',            a: '跳转url地址',        },        {            img: 'https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=372372667,1126179944&fm=26&gp=0.jpg',            a: '跳转url地址',        },        {            img: 'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=151472226,3497652000&fm=26&gp=0.jpg',            a: '跳转url地址',        }    ], //图片的列表，a属性里面存放的是网络地址，img存放的是图片地址    width: "100%", //图片的宽    height: 500, //图片的高    isAuto: false, //是否自动轮播    moveTime: 3000, //运动时间    direction: 'right', //轮播的方向    btnWidth: 30, //按钮的宽    btnHeight: 30, //按钮的高    spanWidth: 10, //span按钮的宽    spanHeight: 10, //span按钮的高    spanColor: '#fff', //span按钮的颜色    activeSpanColor: 'red', //选中的span颜色    btnBackgroundColor: 'rgba(0, 0, 0, 0.3)', //两侧按钮的颜色    spanRadius: '50%', //span按钮的圆角程度    spanMargin: 3, //span之间的距离})    }    window.addEventListener('DOMContentLoaded',tt)</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hexo.lxgblog.com/16107.html"/>
    <id>https://hexo.lxgblog.com/16107.html</id>
    <published>2020-05-26T02:03:26.067Z</published>
    <updated>2020-05-28T06:34:33.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><style>@keyframes gradientBG{0%{background-position: 0% 50%;}50%{background-position: 100% 50%;}100% {background-position: 0% 50%;}}#rightside{display:none;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
      <category term="aaa" scheme="https://hexo.lxgblog.com/categories/aaa/"/>
    
      <category term="bbb" scheme="https://hexo.lxgblog.com/categories/aaa/bbb/"/>
    
    
      <category term="技术" scheme="https://hexo.lxgblog.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>typora-vue-theme主题介绍</title>
    <link href="https://hexo.lxgblog.com/25697.html"/>
    <id>https://hexo.lxgblog.com/25697.html</id>
    <published>2018-09-07T01:25:00.000Z</published>
    <updated>2020-05-28T06:46:51.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\js\APlayer.min.js&quot; class=&quot;aplayer-se
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://hexo.lxgblog.com/categories/Markdown/"/>
    
    
      <category term="Typora" scheme="https://hexo.lxgblog.com/tags/Typora/"/>
    
      <category term="Markdown" scheme="https://hexo.lxgblog.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
